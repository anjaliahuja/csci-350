Title:  Writeup for Project 1, Fall 2015 CSCI 350
 Date:  09/20/2015
 Group:
 Anjali Ahuja 	ahujaa@usc.edu
 Anne Kao 		annekao@usc.edu
 Bernard Xie	bernardx@usc.edu


I. REQUIREMENTS:

	This project required us to utilize thread syncrhonization in nachos to simulate the multiprocess execution streams that may take place at a bank. To solve the issues of thread synchronization and the possible race conditions that could arise from the sharing of data and improper sequencing of events, we were required to implement Test & Lock methodology using the necessary conditions of mutual exclusion- ensuring that no 1 thread is in a critical section that another thread is currently in. To eliminate any chance of busy waiting, we disabled interrupts and utilized Test & Lock methodology to properly acquire and release shared data. Specifically, we had to ensure that all instances of customers, cashiers, clerks and the manager could share the correct locks, condition variables and monitor variables to pass a test suite of sequence variations and conditions.

II. ASSUMPTIONS:
	-Up to 5 of each type of clerk, 50 customers, 1 manager and 10 senators can be simulated and properly synchronized without the program crashing and with the correct sharing of locks, condition variables and monitor variables.
	-Customers enter the passport office with a completed application
	-Actions written in the assignment requirements are simulated through the proper implementation of waking up threads, acquiring/releasing locks and using print statements to simualte the exchange of data. 

III. DESIGN
	-First implemented acquire and release methods of lock to be used by each type of person in the bank
	-Wrote condition wait and signal to implement the sleep and wake of threads
	-Designed classes for the customer, each type of clerk and manager that contained the condition variables, line locks, monitor variables for line count
	-Global variables and arrays are stored as monitor variables 

IV. IMPLEMENTATION

	i. Files Modified

	../code/threads/threadtest.cc
	../code/threads/synch.h
	../code/threads/synch.cc 


	ii. Files added
	GROUPNAME
	WRITEUP

	iii. Data Structures added, file they were added to
	In threadtest.cc....

	//Application Clerk Line
	Lock* AppClerkLineLock;
	int AppClerkBribeMoney;

	//Picture Clerk Line
	Lock* PicClerkLineLock;
	int PicClerkBribeMoney;

	//Passport Clerk Line
	Lock* PassportClerkLineLock;
	int PassportClerkBribeMoney;

	//Cashier Line
	Lock* CashierLineLock;
	// App money + bribe money
	int CashierMoney;

	Semaphore sem("sem", 0);

	int NUM_APP_CLERKS;
	int NUM_PIC_CLERKS;
	int NUM_PASSPORT_CLERKS;
	int NUM_CASHIERS;
	int NUM_CUSTOMERS;

	//classes
	class Customer:
		char* name;
	    int ssn;
	    bool app_clerk;
	    bool pic_clerk;
	    bool passport_clerk;
	    bool cashier;
	    bool sendToBackOfLine;
	    int money;

	class AppClerk:
		char* name;
	    int id;
	    int state;
	    int totalServiced;
	    Lock* lock;
	    Condition* cv;
	    Condition* lineCV;
	    Condition* bribeLineCV;

	    Customer* currentCustomer;
	    std::queue<Customer*>* line;
	    std::queue<Customer*>* bribeLine;


	class PicClerk:
		char* name;
	    int id;
	    int state;
	    int totalServiced;
	    bool likePicture;
	    Lock* lock;
	    Condition* cv;
	    Condition* lineCV;
	    Condition* bribeLineCV;

	    Customer* currentCustomer;
	    std::queue<Customer*>* line;
	    std::queue<Customer*>* bribeLine;

	class PassportClerk:
		char* name;
	    int id;
	    int state;
	    int lineSize;
	    int bribeLineSize;
	    int totalServiced;
	    Lock* lock;
	    Condition* cv;
	    Condition* lineCV;
	    Condition* bribeLineCV;

	    Customer* currentCustomer;
	    std::queue<Customer*>* line;
	    std::queue<Customer*>* bribeLine;

	class Cashier:
		char* name;
	    int id;
	    int state;
	    int lineSize;
	    int bribeLineSize;
	    int totalServiced;
	    Lock* lock;
	    Condition* cv;
	    Condition* lineCV;
	    Condition* bribeLineCV;

	    Customer* currentCustomer;
	    std::queue<Customer*>* line;
	    std::queue<Customer*>* bribeLine;

	// Declaring class global variables.
	// List of Clerks
	AppClerk** AppClerks;
	PicClerk** PicClerks;
	PassportClerk** PassportClerks;
	Cashier** Cashiers;

	//List of Customers
	Customer** Customers;



	iv. Data structures modified and file they were added to

	In ../code/threads/synch.h ....

	class Lock {
		//Modified...
		void Acquire();
		void Release();
	}

	class Condition {
		//Modified...
		void Wait(Lock *conditionLock);
		void Signal(Lock *conditionLock);
		void Broadcase(Lock *conditionLock);
	}




	v. Functions added and in which file
	In ../code/threads/threadtest.cc...

	void CustomerStart();
    int FindAppLine();
    void GetApplicationFiled(int my_line);
    int FindPicLine();
    void GetPictureTaken(int my_line);
    int FindPassportLine();
    void GetPassport(int my_line);
    int FindCashierLine();
    void PayCashier(int my_line);
    bool is_app_completed();
    int get_money();
    int get_ssn();
    void set_app_clerk();
    void set_pic_clerk();
    void set_passport_clerk();
    void set_cashier();
    bool get_app_clerk();
    bool get_pic_clerk();
    bool get_passport_clerk();
    bool get_cashier();
    int getSSN()
    void setSendToBackOfLine() 

    void AppClerkStart();
    void Acquire();
    void Release();
    int getState();
    void setState(int s);
    int getLineSize();
    int getBribeLineSize();
    int getTotalServiced();
    Lock* getLock();
    Condition* getCV();
    Condition* getLineCV();
    Condition* getBribeLineCV();
    char* getName();
    void addToLine(Customer* customer);
    void addToBribeLine(Customer* customer);
    void setCurrentCustomer(Customer* customer);

    void PicClerkStart();
    void setLikePicture(bool Like);
    void PassportClerkStart();
   	void CashierStart();





	vi. Functions modified and in which file.

	In ../code/threads/synch.cc

	void Lock::Acquire();
	void Lock::Release();
	Condition::Condition(char* debugName);
	void Condition::Wait(Lock* conditionLock);
	void Condition::Signal(Lock* conditionLock);
	void Condition::Broadcast(Lock* conditionLock);

V. TESTING
	(How to test, how to run test cases, test output, describe testing output)


VI. DISCUSSION: 


VII. MISCELLANEOUS 