Title:  Writeup for Project 1, Fall 2015 CSCI 350
 Date:  09/20/2015
 Group:
 Anjali Ahuja 	ahujaa@usc.edu
 Anne Kao 		annekao@usc.edu
 Bernard Xie	bernardx@usc.edu


I. REQUIREMENTS:

	This project required us to utilize thread syncrhonization in nachos to simulate the multiprocess execution streams that may take place at a passport office. To solve the issues of thread synchronization and the possible race conditions that could arise from the sharing of data and improper sequencing of events, we were required to implement Test & Lock methodology using the necessary conditions of mutual exclusion- ensuring that no 1 thread is in a critical section that another thread is currently in. To eliminate any chance of busy waiting, we disabled interrupts and utilized Test & Lock methodology to properly acquire and release shared data. Specifically, we had to ensure that all instances of customers, cashiers, clerks and the manager could share the correct locks, condition variables and monitor variables to pass a test suite of sequence variations and conditions.

II. ASSUMPTIONS:
	-Up to 5 of each type of clerk, 50 customers, 1 manager and 10 senators can be simulated and properly synchronized without the program crashing and with the correct sharing of locks, condition variables and monitor variables.
	-Customers enter the passport office with a completed application
	-Actions written in the assignment requirements are simulated through the proper implementation of waking up threads, acquiring/releasing locks and using print statements to simualte the exchange of data. 
	-When a customer gets sent to the "back of the line", they must start over the process of looking for the shortest line.
	-For PassportClerk & Cashier, there is no official verification of whether they went to the ApplicationClerk or PictureClerk.  Instead, there is a small random chance that the PassportClerk/Cashier tells them to go to the back of the line.  This is because the way our clerks were implemented were that Customers can not move onto the next clerk without a Signal from their current clerk that they can leave.  See https://piazza.com/class/idqhn1k3sfn267?cid=74#
	-All Clerks and the Cashier have bribe lines.

III. DESIGN
	-First implemented acquire and release methods of lock to be used by each type of person in the passport office
	-Wrote condition wait and signal to implement the sleep and wake of threads
	-Designed classes for the customer, each type of clerk, cashier, and manager that contained the condition variables, line locks, monitor variables for line count
	-Global variables and arrays are stored as monitor variables 

	Main Function for Full Simulation
	-Creates customers, clerks, and cashiers depending on user input.
	-Then starts the threads (customer is started last).

		Customer
		-A customer is responsible for going through each type of clerk and a cashier.  Each clerk/cashier can be broken down into two parts.  Finding the shortest line and then performing the necessary action when it's the customer's turn.  
		-The customer will start at either the ApplicationClerk or PictureClerk, move to the clerk they didn't start at and then finish off with the PassportClerk, then the Cashier.  After this is done, they leave.
		-All finding the shortest line functions are the same.  Separate functions are created in order to find the shortest line at the appropriate clerk.
			-The shortest line is found by going through each line's size for that type of clerk/cashier.
			-The customer can then go to the bribe line, regular line, or be serviced immediately.  
			-The customer has a 30% chance of being on the bribe line if and only if they have at least $600 and the clerk/cashier is currently busy.  They will then add themselves to the bribe line and wait for a signal from the clerk/cashier to come to the counter.  Once they approach the counter, they will have to give the clerk/cashier $500.
			-If the customer is on the regular line, they will have to wait for a signal from the clerk/cashier to come to the counter.
			-When the clerk/cashier is not currently servicing another customer, they can be serviced immediately.  In this case, the customer will go directly to the counter.
			- During this time, the clerk/cashier's line lock is acquired so that the line cannot be modified while the customer is "making decisions".
			-From here the customer will be serviced depending on which clerk/cashier they are at.
		-ApplicationClerk - GetApplicationFiled
			-Their ApplicationClerk's lock is acquired.  This lock is specific for their line.
			-The Customer will first give their application to the ApplicationClerk (represented by giving the SSN).
			-After, they wait for the the ApplicationClerk to do their job.
			-Once the job is completed, they signal the clerk to let them know they are leaving.
			-They release the lock so that the next Customer can acquire it.
			-Customer leaves
		-PictureClerk - GetPictureTaken
			-Their PictureClerk's lock is acquired.  This lock is specific for their line.
			-The Customer will first give their application to the PictureClerk (represented by giving the SSN).
			-The Customer will wait for the PictureClerk to take the picture.
			-After the picture is taken, the Customer will "decide" whether they like the picture or not.  There is a 50% chance they will not like the picture.
				-Does not like the picture-They will inform the PictureClerk that they do not like the picture by setting PictureClerk::likePicture as false and then signalling.  The Customer waits for the clerk to acknowledge that they do not like the picture and signals the clerk that they are leaving.  The PictureClerk's lock is released.  The Customer gets back in line for the PictureClerk.
				-Does like the picture-They will inform the PictureClerk that they do like the picture by setting PictureClerk::likePicture as true and then signalling.  The Customer then waits for their application to be complete.  After they are notified, they then signal the PictureClerk they are leaving.  The PictureClerk's lock is released and they leave.
		-PassportClerk - GetPassport
			-Their PassportClerk's lock is acquired.  This lock is specific for their line.
			-The Customer will first give their application to the PassportClerk (represented by giving the SSN).
			-The Customer will wait for the PassportClerk to determine whether they have gone to them too soon (random 5% chance).
				-Too soon-The Customer will signal the PassportClerk that they are leaving and then be punished.  They release the PassportClerk's lock and go to the back of the line.
				-Not too soon-The Customer will wait for the PassportClerk to record their passport.  They then signal the PassportClerk they are leaving.  The PassportClerk's lock is released and they leave.
		-Cashier - PayCashier
			-Their Cashier's lock is acquired.  This lock is specific for their line.
			-The Customer will first give their application to the Cashier (represented by giving the SSN).
			-The Customer will wait for the Cashier to determine whether they have gone to them too soon (random 5% chance).
				-Too soon-The Customer will signal the Cashier that they are leaving and then be punished.  They release the Cashier's lock and go to the back of the line.
				-Not too soon-The Customer will give the Cashier the application fee ($100).  They then wait for the Cashier to give them their passport.  The Customer informs the Cashier that their passport has been received.  The Customer waits for the Cashier to confirm that the passport has been received. The Cashier's lock is released and they leave.

		ApplicationClerk
			-The ApplicationClerk starts by checking whether there is anyone on the bribe line.  If so, they take the $500 bribe and then service the Customer.  If not, they check the regular line.  If there is someone on the regular line, they signal a Customer to their counter to service them.
			// ADD DESCRIPTION FOR ON BREAK // !!!!~~~~!!!!~!!~!~!
			During this time, the line's lock is Acquired so that the line cannot be modified.
			-The ApplicationClerk acquires the lock for their specific line.
			-The ApplicationClerk waits for the Customer's application (SSN).
			-The ApplicationClerk files the application (takes some time).
			-The ApplicationClerk then informs the Customer that their application has been filed.  They wait for the customer to leave.
			-The ApplicationClerk's lock is released so they may begin to service another Customer.

		PictureClerk
			-The PictureClerk starts by checking whether there is anyone on the bribe line.  If so, they take the $500 bribe and then service the Customer.  If not, they check the regular line.  If there is someone on the regular line, they signal a Customer to their counter to service them.
			// ADD DESCRIPTION FOR ON BREAK // !!!!~~~~!!!!~!!~!~!
			During this time, the line's lock is Acquired so that the line cannot be modified.
			-The PictureClerk acquires the lock for their specific line.
			-The PictureClerk waits for the Customer's application (SSN).
			-The PictureClerk then takes the photo of the Customer and waits to hear whether the Customer has liked the photo or not.
			-If the Customer does not like the photo, they inform the Customer to go to the back to the line. 
			-If the Customer does like the photo, the PictureClerk files the photo (takes some time).
			-The PictureClerk then informs the Customer that their photo has been filed.  They wait for the customer to leave.
			-The PictureClerk's lock is released so they may begin to service another Customer.

		PassportClerk
			-The PassportClerk starts by checking whether there is anyone on the bribe line.  If so, they take the $500 bribe and then service the Customer.  If not, they check the regular line.  If there is someone on the regular line, they signal a Customer to their counter to service them.
			// ADD DESCRIPTION FOR ON BREAK // !!!!~~~~!!!!~!!~!~!
			During this time, the line's lock is Acquired so that the line cannot be modified.
			-The PassportClerk acquires the lock for their specific line.
			-The PassportClerk waits for the Customer's application (SSN).
			-The PassportClerk then determines whether the Customer has both their application and picture completed.  Since both will always be completed, this is decided by a 5% random chance that the PassportClerk will make a mistake and tell them they are both not completed.
			-If the Customer did not "complete" both items, they inform the Customer to go to the back to the line. The Customer is punished and then goes to the back of the line.
			-If the Customer did complete both items, the PassportClerk informs the customer that both items are completed and records their passport (takes some time).
			-The PassportClerk then informs the Customer that their photo has been filed.  They wait for the customer to leave.
			-The PassportClerk's lock is released so they may begin to service another Customer.

		Cashier
			-The Cashier starts by checking whether there is anyone on the bribe line.  If so, they take the $500 bribe and then service the Customer.  If not, they check the regular line.  If there is someone on the regular line, they signal a Customer to their counter to service them.
			// ADD DESCRIPTION FOR ON BREAK // !!!!~~~~!!!!~!!~!~!
			During this time, the line's lock is Acquired so that the line cannot be modified.
			-The Cashier acquires the lock for their specific line.
			-The Cashier waits for the Customer's application (SSN).
			-The Cashier then determines whether the Customer has been verified by the PassportClerk.  Since the Customer will always be verified, this is decided by a 5% random chance that the Cashier will make a mistake and tell them they are not verified.
			-If the Customer did not "get verified", they inform the Customer to go to the back to the line.  The Customer is punished and then goes to the back of the line.
			-If the Customer did get verified, the Cashier informs the customer that they are verified and waits for their payment.
			-After the Cashier is paid, they provide the Customer with their completed passport (takes some time).
			-The Cashier then waits for the Customer to receive their completed passport.  They inform the Customer that they are free to leave.  They wait for the customer to leave.
			-The Cashier's lock is released so they may begin to service another Customer.

IV. IMPLEMENTATION

	i. Files Modified

	../code/threads/threadtest.cc
	../code/threads/synch.h
	../code/threads/synch.cc 


	ii. Files added
	GROUPNAME
	WRITEUP

	iii. Data Structures added, file they were added to
	In threadtest.cc....

	//Application Clerk Line
	Lock* AppClerkLineLock;
	int AppClerkBribeMoney;

	//Picture Clerk Line
	Lock* PicClerkLineLock;
	int PicClerkBribeMoney;

	//Passport Clerk Line
	Lock* PassportClerkLineLock;
	int PassportClerkBribeMoney;

	//Cashier Line
	Lock* CashierLineLock;
	// App money + bribe money
	int CashierMoney;

	Semaphore sem("sem", 0);

	int NUM_APP_CLERKS;
	int NUM_PIC_CLERKS;
	int NUM_PASSPORT_CLERKS;
	int NUM_CASHIERS;
	int NUM_CUSTOMERS;

	//classes
	class Customer:
		char* name;
	    int ssn;
	    bool app_clerk;
	    bool pic_clerk;
	    bool passport_clerk;
	    bool cashier;
	    bool sendToBackOfLine;
	    int money;

	class AppClerk:
		char* name;
	    int id;
	    int state;
	    int totalServiced;
	    Lock* lock;
	    Condition* cv;
	    Condition* lineCV;
	    Condition* bribeLineCV;

	    Customer* currentCustomer;
	    std::queue<Customer*>* line;
	    std::queue<Customer*>* bribeLine;


	class PicClerk:
		char* name;
	    int id;
	    int state;
	    int totalServiced;
	    bool likePicture;
	    Lock* lock;
	    Condition* cv;
	    Condition* lineCV;
	    Condition* bribeLineCV;

	    Customer* currentCustomer;
	    std::queue<Customer*>* line;
	    std::queue<Customer*>* bribeLine;

	class PassportClerk:
		char* name;
	    int id;
	    int state;
	    int lineSize;
	    int bribeLineSize;
	    int totalServiced;
	    Lock* lock;
	    Condition* cv;
	    Condition* lineCV;
	    Condition* bribeLineCV;

	    Customer* currentCustomer;
	    std::queue<Customer*>* line;
	    std::queue<Customer*>* bribeLine;

	class Cashier:
		char* name;
	    int id;
	    int state;
	    int lineSize;
	    int bribeLineSize;
	    int totalServiced;
	    Lock* lock;
	    Condition* cv;
	    Condition* lineCV;
	    Condition* bribeLineCV;

	    Customer* currentCustomer;
	    std::queue<Customer*>* line;
	    std::queue<Customer*>* bribeLine;

	// Declaring class global variables.
	// List of Clerks
	AppClerk** AppClerks;
	PicClerk** PicClerks;
	PassportClerk** PassportClerks;
	Cashier** Cashiers;

	//List of Customers
	Customer** Customers;



	iv. Data structures modified and file they were added to

	In ../code/threads/synch.h ....

	class Lock {
		//Modified...
		void Acquire();
		void Release();
	}

	class Condition {
		//Modified...
		void Wait(Lock *conditionLock);
		void Signal(Lock *conditionLock);
		void Broadcase(Lock *conditionLock);
	}




	v. Functions added and in which file
	In ../code/threads/threadtest.cc...

	void CustomerStart();
    int FindAppLine();
    void GetApplicationFiled(int my_line);
    int FindPicLine();
    void GetPictureTaken(int my_line);
    int FindPassportLine();
    void GetPassport(int my_line);
    int FindCashierLine();
    void PayCashier(int my_line);
    bool is_app_completed();
    int get_money();
    int get_ssn();
    void set_app_clerk();
    void set_pic_clerk();
    void set_passport_clerk();
    void set_cashier();
    bool get_app_clerk();
    bool get_pic_clerk();
    bool get_passport_clerk();
    bool get_cashier();
    int getSSN()
    void setSendToBackOfLine() 

    void AppClerkStart();
    void Acquire();
    void Release();
    int getState();
    void setState(int s);
    int getLineSize();
    int getBribeLineSize();
    int getTotalServiced();
    Lock* getLock();
    Condition* getCV();
    Condition* getLineCV();
    Condition* getBribeLineCV();
    char* getName();
    void addToLine(Customer* customer);
    void addToBribeLine(Customer* customer);
    void setCurrentCustomer(Customer* customer);

    void PicClerkStart();
    void setLikePicture(bool Like);
    void PassportClerkStart();
   	void CashierStart();





	vi. Functions modified and in which file.

	In ../code/threads/synch.cc

	void Lock::Acquire();
	void Lock::Release();
	Condition::Condition(char* debugName);
	void Condition::Wait(Lock* conditionLock);
	void Condition::Signal(Lock* conditionLock);
	void Condition::Broadcast(Lock* conditionLock);

V. TESTING
	(How to test, how to run test cases, test output, describe testing output)


VI. DISCUSSION: 

	i. Experiment expectation 

	-Up to 50 customers, 5 clerks of each type, 10 senators and a manager can be fully synchronized and run in proper sequence for a full simulation
	-Locks are properly acquired and released for the correct interations between customers and clerks and cashiers to take place
	

	ii. Experiment result


	iii. Explanation (Explain how your project proves what its supposed to prove)

	

VII. MISCELLANEOUS 