Title:  Writeup for Project 1, Fall 2015 CSCI 350
 Date:  09/20/2015
 Group:
 Anjali Ahuja 	ahujaa@usc.edu
 Anne Kao 		annekao@usc.edu
 Bernard Xie	bernardx@usc.edu


I. REQUIREMENTS:

	This project required us to utilize thread syncrhonization in nachos to simulate the multiprocess execution streams that may take place at a passport office. To solve the issues of thread synchronization and the possible race conditions that could arise from the sharing of data and improper sequencing of events, we were required to implement Test & Lock methodology using the necessary conditions of mutual exclusion- ensuring that no 1 thread is in a critical section that another thread is currently in. To eliminate any chance of busy waiting, we disabled interrupts and utilized Test & Lock methodology to properly acquire and release shared data. Specifically, we had to ensure that all instances of customers, cashiers, clerks and the manager could share the correct locks, condition variables and monitor variables to pass a test suite of sequence variations and conditions.

II. ASSUMPTIONS:
	-Up to 5 of each type of clerk, 50 customers, 1 manager and 10 senators can be simulated and properly synchronized without the program crashing and with the correct sharing of locks, condition variables and monitor variables.
	-Customers enter the passport office with a completed application
	-Actions written in the assignment requirements are simulated through the proper implementation of waking up threads, acquiring/releasing locks and using print statements to simualte the exchange of data. 
	-When a customer gets sent to the "back of the line", they must start over the process of looking for the shortest line.
	-For PassportClerk & Cashier, there is no official verification of whether they went to the ApplicationClerk or PictureClerk.  Instead, there is a small random chance that the PassportClerk/Cashier tells them to go to the back of the line.  This is because the way our clerks were implemented were that Customers can not move onto the next clerk without a Signal from their current clerk that they can leave.  See https://piazza.com/class/idqhn1k3sfn267?cid=74#
	-All Clerks and the Cashier have bribe lines.
	- When a customer shows up to choose a line, it first looks through all lines to see if it can get into one of those lines that has a clerk not on break, if it can't find one of those lines then it goes to the first on break clerk.
	-Customers can wait on lines that are on break.

III. DESIGN
	-First implemented acquire and release methods of lock to be used by each type of person in the passport office
	-Wrote condition wait and signal to implement the sleep and wake of threads
	-Using locks and condition variables prevents race conditions from occurring by only allowing one thread to access shared data in a critical section at a time. Lock keeps track of current thread owner and wait queue for other threads trying to acquire the lock. If the lock is currently in use and a thread tries to acquire it, it is added to the locks wait queue. Once the thread is no longer using the lock, it releases it and the next thread in the wait queue can acquire the lock.
	-Wait and signal allows us to put threads to sleep or wake them up depending on what is needed by the customers in the bank. 
	
	-Designed classes for the customer, each type of clerk, cashier, and manager that contained the condition variables, line locks, monitor variables for line count
	-Global variables and arrays are stored as monitor variables 

	Main Function for Full Simulation
	-Creates customers, clerks, and cashiers depending on user input.
	-Then starts the threads (customer is started last).

		Customer
		-A customer is responsible for going through each type of clerk and a cashier.  Each clerk/cashier can be broken down into two parts.  Finding the shortest line and then performing the necessary action when it's the customer's turn.  
		-The customer will start at either the ApplicationClerk or PictureClerk, move to the clerk they didn't start at and then finish off with the PassportClerk, then the Cashier.  After this is done, they leave.
		-All finding the shortest line functions are the same.  Separate functions are created in order to find the shortest line at the appropriate clerk.
			-The shortest line is found by going through each line's size for that type of clerk/cashier.
			-The customer can then go to the bribe line, regular line, or be serviced immediately.  
			-The customer has a 30% chance of being on the bribe line if and only if they have at least $600 and the clerk/cashier is currently busy.  They will then add themselves to the bribe line and wait for a signal from the clerk/cashier to come to the counter.  Once they approach the counter, they will have to give the clerk/cashier $500.
			-If the customer is on the regular line, they will have to wait for a signal from the clerk/cashier to come to the counter.
			-When the clerk/cashier is not currently servicing another customer, they can be serviced immediately.  In this case, the customer will go directly to the counter.
			- During this time, the clerk/cashier's line lock is acquired so that the line cannot be modified while the customer is "making decisions".
			-From here the customer will be serviced depending on which clerk/cashier they are at.
		-ApplicationClerk - GetApplicationFiled
			-Their ApplicationClerk's lock is acquired.  This lock is specific for their line.
			-The Customer will first give their application to the ApplicationClerk (represented by giving the SSN).
			-After, they wait for the the ApplicationClerk to do their job.
			-Once the job is completed, they signal the clerk to let them know they are leaving.
			-They release the lock so that the next Customer can acquire it.
			-Customer leaves
		-PictureClerk - GetPictureTaken
			-Their PictureClerk's lock is acquired.  This lock is specific for their line.
			-The Customer will first give their application to the PictureClerk (represented by giving the SSN).
			-The Customer will wait for the PictureClerk to take the picture.
			-After the picture is taken, the Customer will "decide" whether they like the picture or not.  There is a 50% chance they will not like the picture.
				-Does not like the picture-They will inform the PictureClerk that they do not like the picture by setting PictureClerk::likePicture as false and then signalling.  The Customer waits for the clerk to acknowledge that they do not like the picture and signals the clerk that they are leaving.  The PictureClerk's lock is released.  The Customer gets back in line for the PictureClerk.
				-Does like the picture-They will inform the PictureClerk that they do like the picture by setting PictureClerk::likePicture as true and then signalling.  The Customer then waits for their application to be complete.  After they are notified, they then signal the PictureClerk they are leaving.  The PictureClerk's lock is released and they leave.
		-PassportClerk - GetPassport
			-Their PassportClerk's lock is acquired.  This lock is specific for their line.
			-The Customer will first give their application to the PassportClerk (represented by giving the SSN).
			-The Customer will wait for the PassportClerk to determine whether they have gone to them too soon (random 5% chance).
				-Too soon-The Customer will signal the PassportClerk that they are leaving and then be punished.  They release the PassportClerk's lock and go to the back of the line.
				-Not too soon-The Customer will wait for the PassportClerk to record their passport.  They then signal the PassportClerk they are leaving.  The PassportClerk's lock is released and they leave.
		-Cashier - PayCashier
			-Their Cashier's lock is acquired.  This lock is specific for their line.
			-The Customer will first give their application to the Cashier (represented by giving the SSN).
			-The Customer will wait for the Cashier to determine whether they have gone to them too soon (random 5% chance).
				-Too soon-The Customer will signal the Cashier that they are leaving and then be punished.  They release the Cashier's lock and go to the back of the line.
				-Not too soon-The Customer will give the Cashier the application fee ($100).  They then wait for the Cashier to give them their passport.  The Customer informs the Cashier that their passport has been received.  The Customer waits for the Cashier to confirm that the passport has been received. The Cashier's lock is released and they leave.

		ApplicationClerk
			-The ApplicationClerk starts by checking whether there is anyone on the bribe line.  If so, they take the $500 bribe and then service the Customer.  If not, they check the regular line.  If there is someone on the regular line, they signal a Customer to their counter to service them.
			-If there is no one on line, the ApplicationClerk will go on break and wait for a Manager to wake them up.  After they have woken up, they notify the Manager that they've been woken up.
			During this time, the line's lock is Acquired so that the line cannot be modified.
			-The ApplicationClerk acquires the lock for their specific line.
			-The ApplicationClerk waits for the Customer's application (SSN).
			-The ApplicationClerk files the application (takes some time).
			-The ApplicationClerk then informs the Customer that their application has been filed.  They wait for the customer to leave.
			-The ApplicationClerk's lock is released so they may begin to service another Customer.

		PictureClerk
			-The PictureClerk starts by checking whether there is anyone on the bribe line.  If so, they take the $500 bribe and then service the Customer.  If not, they check the regular line.  If there is someone on the regular line, they signal a Customer to their counter to service them.
			-If there is no one on line, the PictureClerk will go on break and wait for a Manager to wake them up.  After they have woken up, they notify the Manager that they've been woken up.
			During this time, the line's lock is Acquired so that the line cannot be modified.
			-The PictureClerk acquires the lock for their specific line.
			-The PictureClerk waits for the Customer's application (SSN).
			-The PictureClerk then takes the photo of the Customer and waits to hear whether the Customer has liked the photo or not.
			-If the Customer does not like the photo, they inform the Customer to go to the back to the line. 
			-If the Customer does like the photo, the PictureClerk files the photo (takes some time).
			-The PictureClerk then informs the Customer that their photo has been filed.  They wait for the customer to leave.
			-The PictureClerk's lock is released so they may begin to service another Customer.

		PassportClerk
			-The PassportClerk starts by checking whether there is anyone on the bribe line.  If so, they take the $500 bribe and then service the Customer.  If not, they check the regular line.  If there is someone on the regular line, they signal a Customer to their counter to service them.
			-If there is no one on line, the PassportClerk will go on break and wait for a Manager to wake them up.  After they have woken up, they notify the Manager that they've been woken up.
			During this time, the line's lock is Acquired so that the line cannot be modified.
			-The PassportClerk acquires the lock for their specific line.
			-The PassportClerk waits for the Customer's application (SSN).
			-The PassportClerk then determines whether the Customer has both their application and picture completed.  Since both will always be completed, this is decided by a 5% random chance that the PassportClerk will make a mistake and tell them they are both not completed.
			-If the Customer did not "complete" both items, they inform the Customer to go to the back to the line. The Customer is punished and then goes to the back of the line.
			-If the Customer did complete both items, the PassportClerk informs the customer that both items are completed and records their passport (takes some time).
			-The PassportClerk then informs the Customer that their photo has been filed.  They wait for the customer to leave.
			-The PassportClerk's lock is released so they may begin to service another Customer.

		Cashier
			-The Cashier starts by checking whether there is anyone on the bribe line.  If so, they take the $500 bribe and then service the Customer.  If not, they check the regular line.  If there is someone on the regular line, they signal a Customer to their counter to service them.
			-If there is no one on line, the Cashier will go on break and wait for a Manager to wake them up.  After they have woken up, they notify the Manager that they've been woken up.
			During this time, the line's lock is Acquired so that the line cannot be modified.
			-The Cashier acquires the lock for their specific line.
			-The Cashier waits for the Customer's application (SSN).
			-The Cashier then determines whether the Customer has been verified by the PassportClerk.  Since the Customer will always be verified, this is decided by a 5% random chance that the Cashier will make a mistake and tell them they are not verified.
			-If the Customer did not "get verified", they inform the Customer to go to the back to the line.  The Customer is punished and then goes to the back of the line.
			-If the Customer did get verified, the Cashier informs the customer that they are verified and waits for their payment.
			-After the Cashier is paid, they provide the Customer with their completed passport (takes some time).
			-The Cashier then waits for the Customer to receive their completed passport.  They inform the Customer that they are free to leave.  They wait for the customer to leave.
			-The Cashier's lock is released so they may begin to service another Customer.

		Manager
			- The manager is within a while loop to constantly check for certain things
			- It loops through all the clerks of each individual type, checking the number of people in their line to see if there's at least 3 people
			- If there are at least 3 people in that line, then it wakes up all the clerks of that particular type that are on break by signaling that particular clerk's lock to wake up.  The Manager will then wait for the clerk/cashier to inform him they have woken up.
			- The manager will also look to see if there are any straggling customers in line. If all the clerks are on break and there are still people in line, then the manager will wake up that line so that the customers can finish their passport.
			- It will also print out the amount of money that is contained by all the clerks and the total amount of money the office has made, these are stored in global variables that the clerks constantly update
			- the manager will then yield 100 times as to not keep continuously printing out the money amounts

		// Implemented but does not run 
		Senator
			-The Senator is a special kind of Customer.  It is randomly determined whether a Customer is a Senator at creation.  Customers that are Senators will have their isSenator bool set to true.
			-Senators go through the same motions as Customers except that:
				-The Senator will wait till a clerk/cashier is ready to address them.
				-The Senator will signal each clerk/cashier that they have arrived
				-The Senator waits for the clerk/cashier to inform them that everyone has left in their line.
				-After each type of clerk/cashier has made sure every Customer has left, the Senator will then go through the ApplicationClerk, PictureClerk, PassportClerk, and Cashier normally.

			Clerks/Cashier actions for Senator
				-The clerk/cashier will check if a Senator has arrived.
				-If so, they signal that they are ready and then wait for the Senator to inform them they have arrived.
				-They will then inform their customers to leave the office for the senator.
				-After the customers have left, they signal the Senator.  Then work continues as normal.


IV. IMPLEMENTATION

	i. Files Modified

	../code/threads/threadtest.cc
	../code/threads/synch.h
	../code/threads/synch.cc 


	ii. Files added
	GROUPNAME
	WRITEUP

	iii. Data Structures added, file they were added to
	In ../code/threads/synch.cc ....

	In threadtest.cc....
	class Lock
		char* name;
		char* state;
		Thread* lockOwnerThread;
		List *lockWaitQueue;
	class Condition
		char* name;
		Lock* waitingLock;
		List* waitConditionQueue;

	//Application Clerk Line
	Lock* AppClerkLineLock;
	int AppClerkBribeMoney;

	//Picture Clerk Line
	Lock* PicClerkLineLock;
	int PicClerkBribeMoney;

	//Passport Clerk Line
	Lock* PassportClerkLineLock;
	int PassportClerkBribeMoney;

	//Cashier Line
	Lock* CashierLineLock;
	// App money + bribe money
	int CashierMoney;

	Semaphore sem("sem", 0);

	int NUM_APP_CLERKS;
	int NUM_PIC_CLERKS;
	int NUM_PASSPORT_CLERKS;
	int NUM_CASHIERS;
	int NUM_CUSTOMERS;

	bool SenatorArrived;
	Lock* SenatorLock;

	bool test1;
	bool test6;
	bool test7;
	int MONEY;

	//classes
	class Customer:
		char* name;
	    int ssn;
	    bool app_clerk;
	    bool pic_clerk;
	    bool passport_clerk;
	    bool cashier;
	    bool sendToBackOfLine;
	    int money;
	    bool isSenator;

	class AppClerk:
		char* name;
	    int id;
	    int state;
	    Lock* lock;
	    Condition* cv;
	    Condition* lineCV;
	    Condition* bribeLineCV;
	    Condition* senatorCV;

	    Customer* currentCustomer;
	    std::queue<Customer*>* line;
	    std::queue<Customer*>* bribeLine;


	class PicClerk:
		char* name;
	    int id;
	    int state;
	    bool likePicture;
	    Lock* lock;
	    Condition* cv;
	    Condition* lineCV;
	    Condition* bribeLineCV;
	    Condition* senatorCV;
	    bool setUpSenator;

	    Customer* currentCustomer;
	    std::queue<Customer*>* line;
	    std::queue<Customer*>* bribeLine;

	class PassportClerk:
		char* name;
	    int id;
	    int state;
	    int lineSize;
	    int bribeLineSize;
	    Lock* lock;
	    Condition* cv;
	    Condition* lineCV;
	    Condition* bribeLineCV;

	    Customer* currentCustomer;
	    std::queue<Customer*>* line;
	    std::queue<Customer*>* bribeLine;

	class Cashier:
		char* name;
	    int id;
	    int state;
	    int lineSize;
	    int bribeLineSize;
	    Lock* lock;
	    Condition* cv;
	    Condition* lineCV;
	    Condition* bribeLineCV;
	    Condition* senatorCV;

	    bool setUpSenator;

	    Customer* currentCustomer;
	    std::queue<Customer*>* line;
	    std::queue<Customer*>* bribeLine;

	class Manager:
		char* name

		

	// Declaring class global variables.
	// List of Clerks
	AppClerk** AppClerks;
	PicClerk** PicClerks;
	PassportClerk** PassportClerks;
	Cashier** Cashiers;
	Manager* manager;

	//List of Customers
	Customer** Customers;



	iv. Data structures modified and file they were added to

	In ../code/threads/synch.h ....

	class Lock {
		//Modified...
		void Acquire();
		void Release();
	}

	class Condition {
		//Modified...
		void Wait(Lock *conditionLock);
		void Signal(Lock *conditionLock);
		void Broadcase(Lock *conditionLock);
	}




	v. Functions added and in which file
	In ../code/threads/threadtest.cc...

	void CustomerStart();
    int FindAppLine();
    void GetApplicationFiled(int my_line);
    int FindPicLine();
    void GetPictureTaken(int my_line);
    int FindPassportLine();
    void GetPassport(int my_line);
    int FindCashierLine();
    void PayCashier(int my_line);
    int getSSN()
    void setSendToBackOfLine() 

    void AppClerkStart();
    void Acquire();
    void Release();
    int getState();
    void setState(int s);
    int getLineSize();
    int getBribeLineSize();
    Lock* getLock();
    Condition* getCV();
    Condition* getLineCV();
    Condition* getBribeLineCV();
    Condition* getSenatorCV();
    char* getName();
    void addToLine(Customer* customer);
    void addToBribeLine(Customer* customer);
    void setCurrentCustomer(Customer* customer);

    void PicClerkStart();
    void setLikePicture(bool Like);
    void PassportClerkStart();
   	void CashierStart();

   	void ManagerStart();


	vi. Functions modified and in which file.

	In ../code/threads/synch.cc

	void Lock::Acquire();
	void Lock::Release();
	Condition::Condition(char* debugName);
	void Condition::Wait(Lock* conditionLock);
	void Condition::Signal(Lock* conditionLock);
	void Condition::Broadcast(Lock* conditionLock);

V. TESTING
	For testing purposes, please run "nachos -P2".  From there you can select tests 1 - 7 or the full simulation.  Each test will run with a set number of customers, clerks, and cashiers which will be printed out at the beginning of the test.
	Each test will print out the print statements outlined in the output statement guidelines as well as any releveant "TEST_X:" statements (X being the test number).

	Disclaimer: Not all tests will say "Test X PASSED".  Depending on the test it may be required to view the print statements and read the below documentation to verify the test has passed.

	TEST_1: Customers always take the shortest line, but no 2 customers ever choose the same shortest line at the same time
	-There are 2 ApplicationClerks and 2 Customers.  ApplicationClerk 0 will start off with 2 dummy Customers.  These dummy Customers do not start their threads and do nothing except to feign that ApplicationClerk 0 has a line.  Then AppicationClerk 1 and the 2 real Customers starts their threads.
	See: 
		TEST_1: ApplicationClerk 0 has 2 Customers
		TEST_1: ApplicationClerk 1 has 0 Customers
	-The regular output guidelines will show that the 2 real Customers enter ApplicationClerk 1's line.
	-The "TEST_1:" statements show that the Customers enter the line at different times because the lock for Customer 2 is acquired after Customer 1 has gotten in line.
	See: 
		TEST_1: Customer 0 has acquired ApplicationClerk's line lock
		Customer 0 has gotten in regular line for ApplicationClerk 1
		TEST_1: Customer 1 has acquired ApplicationClerk's line lock
		Customer 1 has gotten in regular line for ApplicationClerk 1

	TEST_2: Managers only read one from one Clerk's total money received, at a time
	Test 2 has 2 customers and 1 of each of the clerks, the customers will go through all the clerks and complete their processes of getting their passport, paying 100$ each to the cashier. Throughout this time the manager will look around and print out the amount of money held by the various clerks. By the end, the manager should print out the correct amount from the cashiers.
	See:
		Manager has counted a total of 0 for Application Clerks
		Manager has counted a total of 0 for Picture Clerks
		Manager has counted a total of 0 for Passport Clerks
		Manager has counted a total of 100 for Cashiers
		Manager has counted a total of 100 for the Passport Office

		The above is a demonstration of what the very last check by the managers should print out

	TEST_3: Customers do not leave until they are given their passport by the Cashier. 
	The Cashier does not start on another customer until they know that the last 
	Customer has left their area
	-There are 3 Customers and 1 Cashier.  The print statements of the output guidelines should give indication of whether the test passes or not.
	See: 
		Cashier 0 has provided Customer 0 their completed passport
		Cashier 0 has recorded that Customer 0 has been given their completed passport
		Customer 0 is leaving the Passport Office
		Cashier 0 has signalled a Customer to come to their counter
	As the test requires: "Customer 0 is leaving the Passport Office" comes after "Cashier 0 has recorded that Customer 0 has been given their completed passport".  Only when the Customer has left the passport office does the "Cashier 0 signal a Customer to come to their counter"

	TEST_4: Clerks go on break when they have no one waiting in their line
	- There are 1 AppClerks and 1 Customers, thus the moment the test begins the AppClerk should go on break immediately. The manager will wake up that customer and allow the application clerk to process that customer. Then when the customer moves on the app clerk should immediately go back on break because there are no more customers in line.
	See:
		appClerk_0 is going on break
		Customer 0 has gotten in regular line for appClerk_0
		Manager has woken up appClerk_0
		appClerk_0 has woken up
		appClerk_0 has signalled a Customer to come to their counter
		Customer 0 has given SSN 0 to appClerk_0
		appClerk_0 has received SSN 0 from Customer 0
		appClerk_0 has recorded a completed application for Customer 0
		appClerk_0 is going on break



	TEST_5: Managers get Clerks off their break when lines get too long
	There will be 3 customers and 1 application clerk. The clerk will go break the moment they are initialized because there are no customers are in line. Then 3 customers will enter the line and the application clerk will wake up and process all the customers.
	See:
		ApplicationClerk 0 is going on break
		Customer 0 has gotten in regular line for ApplicationClerk 0
		Customer 1 has gotten in regular line for ApplicationClerk 0
		Customer 2 has gotten in regular line for ApplicationClerk 0
		Manager has woken up ApplicationClerk 0
		...

	TEST_6: Total sales never suffers from a race condition
	-There are 7 Customers and 2 of each type of Clerk and Cashier.  A global MONEY variable will increment the appropriate amount (500 or 100) whenever a Customer spends money.  This is then compared to the summation of AppClerkBribeMoney, PicClerkBribeMoney, PassportClerkBribeMoney, and CashierMoney.  If they are equal the test will pass.

	TEST_7: The behavior of Customers is proper when Senators arrive. This is
  	before, during, and after


VI. DISCUSSION: 

	i. Experiment expectation 

	-Up to 50 customers, 5 clerks of each type, 10 senators and a manager can be fully synchronized and run in proper sequence for a full simulation
	-Locks are properly acquired and released for the correct interations between customers and clerks and cashiers to take place
	-All tests and full simulation work correctly
	

	ii. Experiment result
	-Tests 1-6 work. Senator is partially functioning, runs into a bug after customer goes through first few clerks but does not reach the end. 

	iii. Explanation (Explain how your project proves what its supposed to prove)
	-Customers, clerks, cashier and manager all interact correctly and are synchronized to allow customers to go through passport office in any order and receive their passport. 

	

VII. MISCELLANEOUS 
	
